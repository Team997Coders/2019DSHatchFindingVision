plugins {
    // Adds empty build, clean, and assemble tasks to project
    id 'base'
    // Simple way to push apps to raspberry pi
    // Big shout out to https://github.com/int128/gradle-ssh-plugin
    // for enabling interaction to remote system over ssh using gradle.  Nice!
    id 'org.hidetake.ssh' version '2.9.0'
}

allprojects {
    // NOTE: If you do a build on Windows targeting another architecture, tests
    // will (naturally) fail.  Therefore, you can do:
    // gradlew build -x test -Ptarget="arm-raspbian"
    // If development of Windows and targeting windows, simply do:
    // gradlew build
    // valid targets = windows (default), arm-raspbian, armhf
    // Also note that the python apps build source distributions only, so
    // it does not matter which target is selected for those.  'pip install'
    // will work appropriately regardless of the target platform.

    ext.buildType = project.hasProperty('target') ? project.property('target') : 'windows'
}

def binDirectory = file("${rootDir}/bin")
def scriptsDirectory = "${rootDir}/scripts"
def pythonDirectory = "${binDirectory}/python"

remotes {
    piccb {
        host = 'visioncoproc.local'
        user = 'pi'
        password = 'raspberry'
    }
}

ssh.settings {
    knownHosts = allowAnyHosts
    fileTransfer = 'scp'
}

// Normally this is implicit with java plugin, but base plugin makes no sub-project assumptions
build.dependsOn ':CameraServer:pydist', ':CameraVision:build', ':NTSimulator:pydist', ':FocusUF:build'

task copyStartupScript(type: Copy) {
  description "Copies the startup application to the root bin directory."
  destinationDir = binDirectory
  if (buildType == "windows") {
    from (file("${scriptsDirectory}/startup.bat")) {
    }
    from (file("${scriptsDirectory}/local-debug-startup.bat")) {
    }
  } else {
    from (file("${scriptsDirectory}/startup.sh")) {
    }
    from (file("${scriptsDirectory}/startup-debug.sh")) {
    }
    from (file("${scriptsDirectory}/local-debug-startup.sh")) {
    }
  }
}

task buildPythonVirtualEnvironment(type: Exec) {
  // Assumption: venv is installed...which it is for the binary msi version of Python I got for Windows
  description "Creates a virtual python environment in the root bin directory."
  outputs.dir "${pythonDirectory}"
  //Windows vs linux python naming!
  commandLine "python", "-m", "venv", "--clear", "${pythonDirectory}"
}

task installIPCameraApp(type: Exec) {
    dependsOn ':CameraServer:pydist'
    commandLine "${pythonDirectory}/scripts/pip", "install", "--upgrade", "--find-links", "file://${rootProject.projectDir}/CameraServer/build/python/dist", "ipcamera"
    doLast {
        copy {
            into binDirectory
            if (buildType == "windows") {
                from(file("./CameraServer/stream-camera.bat"))
            } else {
                from(file("./CameraServer/stream-camera.sh"))
                from(file("./CameraServer/set-camera.sh"))
            }
        }
    }
}

task installNTServerApp(type: Exec) {
  dependsOn ':NTSimulator:pydist'
  commandLine "${pythonDirectory}/scripts/pip", "install", "--upgrade", "--find-links", "file://${rootProject.projectDir}/NTSimulator/build/python/dist", "ntserver"
}

task installVisionApp(type: Copy) {
  dependsOn ':CameraVision:build'
  from zipTree("${rootProject.projectDir}/CameraVision/build/distributions/CameraVision-all.zip")
  into binDirectory
}

build.dependsOn copyStartupScript
build.dependsOn buildPythonVirtualEnvironment
build.dependsOn installIPCameraApp
build.dependsOn installNTServerApp
build.dependsOn installVisionApp

clean {
    description "Remove the root bin directory."
    delete binDirectory
}

// Make the deploy task accept a parameter that will tell below which remote
// to deploy to.
task deploy(dependsOn: build) {
    doLast {
        if (buildType == "windows") {
            println "Windows deployment not coded at this time.  You can run locally at ${binDirectory}"
        } else {
            ssh.run {
                session(remotes.piccb) {
                    // Install dependencies
                    // This should bring up this project from a fresh raspbian install.
                    // You must have ssh installed first using `sudo raspi-config`.
                    // Will this work on the robo-rio?
                    // Doubt it...don't know...must test.
                    try {
                        // this little trick will quickly determine if we are connected
                        // to the internet and will throw an error if not
                        execute 'nc -z 8.8.8.8 53'
                        executeSudo 'apt-get --assume-yes update'
                        executeSudo 'apt-get --assume-yes install dos2unix'
                        executeSudo 'apt-get --assume-yes install python3'
                        executeSudo 'apt-get --assume-yes install python3-pip'
                        executeSudo 'apt-get --assume-yes install oracle-java8-jdk'
                        executeSudo 'apt-get --assume-yes install libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools'
                    } catch (Exception e)
                    {
                        println "Could not install dependencies.  Connected to Internet?"
                    }
                    // Now copy the build
                    execute 'mkdir -p /home/pi/bin'
                    execute 'mkdir -p /home/pi/sw'
                    put from: fileTree(binDirectory).matching { exclude 'python/**'}, into: '/home/pi/bin'
                    put from: fileTree(dir: "${rootProject.projectDir}/CameraServer/build/python/dist"), into: '/home/pi/sw'
                    put from: fileTree(dir: "${rootProject.projectDir}/NTSimulator/build/python/dist"), into: '/home/pi/sw'
                    // Install the build
                    execute 'pip3 install -U --find-links file:///home/pi/sw ntserver ipcamera'
                    execute 'chmod u+x /home/pi/bin/*.sh'
                    execute 'dos2unix /home/pi/bin/*.sh'
                }
            }
        }
    }
}